{"version":3,"sources":["services/notes.jsx","components/Note.jsx","components/Notification.jsx","components/Footer.jsx","App.jsx","index.jsx"],"names":["baseUrl","getAll","a","request","axios","get","then","response","data","create","newObject","post","update","id","put","Note","note","toggleImportance","label","important","className","content","onClick","Notification","message","Footer","style","color","fontStyle","fontSize","App","useState","notes","setNotes","newNote","setNewNote","showAll","setShowAll","errorMessage","setErrorMessage","useEffect","noteService","initialNotes","notesToShow","filter","map","i","find","n","changedNote","returnedNote","catch","error","setTimeout","toggleImportanceOf","onSubmit","event","preventDefault","noteObject","date","Date","toISOString","Math","random","concat","value","onChange","console","log","target","type","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.6a423336.chunk.js","sourcesContent":["import axios from 'axios'\r\n//const baseUrl = 'http://localhost:3001/api/notes'\r\n//const baseUrl = 'http://rocky-sea-60210.herokuapp.com/api/notes'\r\nconst baseUrl = '/api/notes'\r\n\r\nconst getAll = async() => {\r\n  const request = axios.get(baseUrl)\r\n  return request.then(response => { return response.data })\r\n}\r\n\r\nconst create = async newObject => {\r\n  const request = axios.post(baseUrl, newObject)\r\n  return request.then(response => response.data)\r\n}\r\n\r\nconst update = async (id, newObject) => {\r\n  const request = axios.put(`${baseUrl}/${id}`, newObject)\r\n  return request.then(response => response.data)\r\n}\r\n\r\n// eslint-disable-next-line import/no-anonymous-default-export\r\nexport default { getAll, create, update }","import React from 'react'\r\n\r\nconst Note = ({ note, toggleImportance }) => {\r\n  const label = note.important\r\n    ? 'make not important' : 'make important'\r\n\r\n  return (\r\n    <li className='note'>\r\n      {note.content} \r\n      <button onClick={toggleImportance}>{label}</button>\r\n    </li>\r\n  )\r\n}\r\n\r\nexport default Note","import React from 'react'\r\n\r\nconst Notification = ({ message }) => {\r\n    if (message === null) {\r\n      return null\r\n    }\r\n  \r\n    return (\r\n      <div className=\"error\">\r\n        {message}\r\n      </div>\r\n    )\r\n  }\r\n\r\n  export default Notification","import React from 'react'\r\n\r\nconst Footer = () => {\r\n    const footerStyle = {\r\n      color: 'green',\r\n      fontStyle: 'italic',\r\n      fontSize: 16\r\n    }\r\n    return (\r\n      <div style={footerStyle}>\r\n        <br />\r\n        <em>Note app, Department of Computer Science, University of Helsinki 2020</em>\r\n      </div>\r\n    )\r\n  }\r\n  export default Footer","import React, { useState, useEffect } from 'react'\nimport axios from 'axios'\nimport noteService from './services/notes'\nimport Note from './components/Note'\nimport Notification from './components/Notification'\nimport Footer from './components/Footer'\nimport './App.css';\n\n\nconst App = () => {\n  const [notes, setNotes] = useState([])\n  const [newNote, setNewNote] = useState('a new note...') \n  const [showAll, setShowAll] = useState(true)\n  const [errorMessage, setErrorMessage] = useState('App Started !!!')\n\n  useEffect(() => {\n    noteService\n      .getAll()\n      .then(initialNotes => {\n        setNotes(initialNotes)\n      })\n  }, [])\n\n  const addNote = (event) => {\n    event.preventDefault()\n    const noteObject = {\n      content: newNote,\n      date: new Date().toISOString(),\n      important: Math.random() < 0.5,\n    }\n  \n    axios\n    .post('http://localhost:3001/notes', noteObject)\n    .then(response => {\n      setNotes(notes.concat(response.data))\n      setNewNote('')\n    })\n  }\n\n  const handleNoteChange = (event) => {\n    console.log(event.target.value)\n    setNewNote(event.target.value)\n  }\n\n  const notesToShow = showAll ? notes : notes.filter(note => note.important === true)\n\n  const toggleImportanceOf = id => {\n    const note = notes.find(n => n.id === id)\n    const changedNote = { ...note, important: !note.important }\n\n    noteService\n      .update(id, changedNote)\n      .then(returnedNote => {\n        setNotes(notes.map(note => note.id !== id ? note : returnedNote))\n      })\n      .catch(error => {\n        setErrorMessage(`Note '${note.content}' was already removed from server`)\n\n        setTimeout(() => {\n          setErrorMessage(null)\n        }, 5000)\n\n        setNotes(notes.filter(n => n.id !== id))\n      })\n  }\n\n  return (\n    <div>\n      <h1>Notes</h1>\n      <Notification message={errorMessage} />\n      <div>\n        <button onClick={() => setShowAll(!showAll)}>\n          show {showAll ? 'important' : 'all' }\n        </button>\n      </div>\n      <ul>\n      {notesToShow.map((note, i) => \n          <Note\n            key={i}\n            note={note} \n            toggleImportance={() => toggleImportanceOf(note.id)}\n          />\n        )}\n      </ul>\n      <form onSubmit={addNote}>\n       <input \n          value={newNote} \n          onChange={handleNoteChange}\n       />\n        <button type=\"submit\">save</button>\n      </form>\n      <Footer />\n    </div>\n  )\n}\n\nexport default App ","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\n\nReactDOM.render(<App />, document.getElementById('root'))"],"sourceRoot":""}